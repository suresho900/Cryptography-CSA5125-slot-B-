#include<stdio.h>
#include <string.h>
char keyMatrix[5][5];
void createMatrix(char *key)
 {
    int used[26] = {0}, i, j, k = 0;
    char ch;
    for (i = 0; i < strlen(key); i++) {
        ch = key[i] == 'J' ? 'I' : key[i];
        if (!used[ch - 'A']) {
            keyMatrix[k / 5][k % 5] = ch;
            used[ch - 'A'] = 1;
            k++;
        }
    }
    for (ch = 'A'; ch <= 'Z'; ch++) {
        if (ch == 'J') continue;
        if (!used[ch - 'A']) {
            keyMatrix[k / 5][k % 5] = ch;
            used[ch - 'A'] = 1;
            k++;
        }
    }
}
void findPos(char ch, int *row, int *col) {
    if (ch == 'J') ch = 'I';
    for (int i = 0; i < 5; i++)
        for (int j = 0; j < 5; j++)
            if (keyMatrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
}
void encrypt(char *plain) {
    int i = 0, r1, c1, r2, c2;
    while (plain[i] != '\0') {
        char a = plain[i];
        char b = (plain[i + 1] != '\0' && plain[i + 1] != a) ? plain[i + 1] : 'X';
        if (a == b) i++; else i += 2;

        findPos(a, &r1, &c1);
        findPos(b, &r2, &c2);

        if (r1 == r2)
            printf("%c%c", keyMatrix[r1][(c1 + 1) % 5], keyMatrix[r2][(c2 + 1) % 5]);
        else if (c1 == c2)
            printf("%c%c", keyMatrix[(r1 + 1) % 5][c1], keyMatrix[(r2 + 1) % 5][c2]);
        else
            printf("%c%c", keyMatrix[r1][c2], keyMatrix[r2][c1]);
    }
}

int main() {
    char key[26], text[100];
    printf("Enter keyword (A-Z): ");
    scanf("%s", key);
    printf("Enter plaintext (A-Z): ");
    scanf("%s", text);
    createMatrix(key);
    printf("Encrypted: ");
    encrypt(text);
    return 0;
}
//output:-
Enter keyword (A-Z): MONARCHY
Enter plaintext (A-Z): INSTRUMENTSX
Encrypted: GATLMZCLRQXA
